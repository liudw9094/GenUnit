/*
 * Utils.cpp
 *
 *  Created on: Dec 5, 2015
 *      Author: ldw
 */


#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <dirent.h>
#include <iostream>
#include "Utils.h"
using namespace std;


/**
** mkpath - ensure all directories in path exist
** Algorithm takes the pessimistic view and works top-down to ensure
** each directory in path exists, rather than optimistically creating
** the last element and working backwards.
*/
int mkpath(const char *path, mode_t mode)
{
	char* p = (char*)path;
	for (p=strchr(p+1, '/'); p; p=strchr(p+1, '/'))
	{
		*p='\0';
		if (mkdir(path, mode)==-1)
		{
			int err = errno;
			if (err!=EEXIST)
			{
				*p='/'; return -1;
			}
	    }
	    *p='/';
	}
	return mkdir(path, mode);
	/*
	string mkdirCmd = string("mkdir -p \"") + path + "\"";
	system(mkdirCmd.c_str());
	*/
}

string getFileName(const string& filepath)
{
	size_t pos = filepath.find_last_of("/\\");
	string name;
	if(pos !=std::string::npos && pos < filepath.length())
		name = filepath.substr(pos+1);
	return name;
}

string getFileTitle(const std::string& filepath)
{
	string filename = getFileName(filepath);
	size_t pos = filename.rfind(".");
	if(pos != string::npos)
		filename[pos] = "\0";
	return string(filename.c_str());
}

std::string getRelativeFilePath(const std::string& filepath,const std::string& dir)
{
	size_t pos = filepath.find(dir);
	string p = filepath;
	if(pos !=std::string::npos && pos < filepath.length())
		p = filepath.substr(pos+dir.length()+1);
	return p;
}

string getDirectory(const string& filepath)
{
	size_t pos = filepath.find_last_of("/\\");
	string name;
	if(pos !=std::string::npos && pos < filepath.length())
		name = filepath.substr(0, pos);
	return name;
}

vector<string> enumDirs(const string& parentDir)
{
	vector<string> childDir;
	DIR           *d;
	struct dirent *entry;
	d = opendir(parentDir.c_str());
	if (d)
	{
		while ((entry = readdir(d)) != NULL)
		{
			if (entry->d_type == DT_DIR)
			{
				string name = entry->d_name;
				if(name != "." && name != "..")
				{
					string path = parentDir + "/" + entry->d_name;
					childDir.push_back(path);
				}
			}
		}
		closedir(d);
	}
	return childDir;
}

vector<string> enumFiles(const string& parentDir, bool recursively /*= false*/)
{
	vector<string> childDir;
	DIR           *d;
	struct dirent *entry;
	d = opendir(parentDir.c_str());
	if (d)
	{
		while ((entry = readdir(d)) != NULL)
		{
			string name = entry->d_name;
			if (entry->d_type == DT_REG)
			{
				string path = parentDir + "/" + entry->d_name;
				childDir.push_back(path);
				cout<<path<<endl;
			}
			else if (entry->d_type == DT_DIR && recursively)
			{
				if(name != "." && name != "..")
				{
					string dirpath = parentDir + "/" + name;
					vector<string> files = enumFiles(dirpath, recursively);
					childDir.insert(childDir.end(), files.begin(), files.end());
				}
			}
		}
		closedir(d);
	}
	return childDir;
}

std::string getexepath()
{
  char result[ PATH_MAX ];
  ssize_t count = readlink( "/proc/self/exe", result, PATH_MAX );
  return std::string( result, (count > 0) ? count : 0 );
}
